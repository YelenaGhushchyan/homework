using System.Collections;

class MyQueue<T> : IEnumerable<T>
{
    private T[] _arr;
    private int _head; 
    private int _tail; 
    public int Size { get; private set; }
    public int Capacity { get; private set; }

    public MyQueue(int capacity)
    {
        _arr = new T[capacity];
        _head = 0;
        _tail = 0;
        Size = 0;
        Capacity = capacity;
    }

    public void Enqueue(T val)
    {
        if (Size == Capacity)
        {
            Resize(Capacity * 2);
        }

        _arr[_tail] = val;
        _tail = (_tail + 1) % Capacity;
        Size++;
    }

    public T Dequeue()
    {
        
        T val = _arr[_head];
        _arr[_head] = default(T);
        _head = (_head + 1) % Capacity;
        Size--;
        return val;
    }
    public T Peek()
    {
        if (Size == 0) throw new InvalidOperationException("Queue is empty");
        return _arr[_head];
    }

    public bool IsEmpty()
    {
        return Size == 0;
    }
    private void Resize(int newCapacity)
    {
        T[] newArr = new T[newCapacity];

       
        for (int i = 0; i < Size; i++)
        {
            newArr[i] = _arr[(_head + i) % Capacity];
        }

        _arr = newArr;
        _head = 0;
        _tail = Size; 
        Capacity = newCapacity;
    }
    public IEnumerator<T> GetEnumerator()
    {
        for (int i = 0; i < Size; i++)
        {
            yield return _arr[i];
        }
    }
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
    
}
