using System.Collections;

class Vector<T> : IEnumerable<T>
{
    private T[] _list;
    public int Count { get; private set; }
    public int Capacity { get; private set; }

    public T this[int index]
    {
        get
        {
            if (index < 0 || index >= Count)
            {
                throw new IndexOutOfRangeException("Your index is Out of range");
            }

            return _list[index];
        }
        set
        {
            if (index < 0 || index >= Count)
            {
                throw new IndexOutOfRangeException("Your index is Out of range");
            }

            _list[index] = value;

        }
        
    }
    public Vector(int capacity)
    {
        Capacity = capacity;
        _list = new T[capacity];
        Count = 0;
    }

    public void Push_Back(T val)
    {
        if (Count == _list.Length)
            Resize(_list.Length * 2);
        _list[Count++] = val;
    }

    public void Resize(int newLength)
    {
        T[] newArr = new T[newLength];
        for (int i = 0; i < Count; i++)
        {
            newArr[i] = _list[i];
        }

        _list = newArr;

    }
    
    public void Push_Back(T val, int count)
    {
        for (int i = 0; i < count; i++)
        {
            Push_Back(val);
        }
    }

    public void Insert(T val, int pos)
    {
        if (pos >= Capacity)
        {
            Resize(Capacity * 2);
        }

        if (pos >= Capacity)
        {
            throw new IndexOutOfRangeException("Out of range");
        }

        for (int i = Count - 1; i >= pos; i--)
        {
            _list[i + 1] = _list[i];
        }

        _list[pos] = val;
        Count++;
    }
    public void Pop_Back()
    {
        _list[Count--] = default(T);
    }

    public void Erase(int pos)
    {
        if (pos < 0 || pos >= Count)
        {
            throw new IndexOutOfRangeException("OUT OF RANGE");
        }

        for (int i = pos; i < Count - 1; i++)
        {
            _list[i] = _list[i + 1];
        }

        _list[Count - 1] = default(T);
        Count--;
    }

    public void Shrink_To_Fit()
    {
        if (Count < Capacity)
        {
            T[] newArr = new T[Count];

            for (int i = 0; i < Count; i++)
            {
                newArr[i] = _list[i];
            }

            _list = newArr;
        }
    }

    public void Resize(T val, int size)
    {
        if (size < Count)
        {
            for (int i = Count - 1; i <= size; i--)
            {
                _list[i] = default(T);
            }

            Count = size;
        }

        if (size > Count)
        {
            for (int i = Count; i <= size; i++)
            {
                _list[i] = val;
            }

            Count = size;

        }

    }

    public void Clear()
    {
        Count = 0;

    }

    public IEnumerator<T> GetEnumerator()
    {
        for(int i = 0; i < Count; i++)
        {
            yield return _list[i];
        }
    }
    
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
    
    

}
