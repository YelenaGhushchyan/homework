using System;
using System.Collections;

public class MyArrayList : ICloneable, IEnumerable
{
    public int Count { get; private set; }
    public int Capacity { get; private set; }
    private object[] _array;

    public object this[int index]
    {
        get
        {
            if (index < 0 || index >= Count)
            {
                throw new IndexOutOfRangeException("out of range");
            }
            return _array[index];
        }
        set
        {
            if (index < 0 || index >= Count)
            {
                throw new IndexOutOfRangeException("out of range");
            }
            _array[index] = value;
        }
    }

    public MyArrayList(int capacity)
    {
        Capacity = capacity;
        _array = new object[capacity];
        Count = 0;
    }

    public void Add(object item)
    {
        if (Count == Capacity)
        {
            object[] newArray = new object[Capacity * 2];
            for (int i = 0; i < Count; i++)
            {
                newArray[i] = _array[i];
            }
            _array = newArray;
        }
        _array[Count++] = item;
    }

    public void RemoveLast()
    {
        _array[Count--] = null;
    }

    public void Remove(object? obj)
    {
        for (int i = 0; i < Count; i++)
        {
            if (_array[i].Equals(obj))
            {
                RemoveAt(i);
            }
        }
    }

    public void RemoveAt(int index)
    {
        if (index < 0 || index >= Count)
        {
            throw new IndexOutOfRangeException("out of range");
        }

        for (int i = index; i < Count - 1; i++)
        {
            _array[i] = _array[i + 1];
        }

        _array[Count--] = null;
    }

    public bool Contains(object? item)
    {
        for (int i = 0; i < Count; i++)
        {
            if (_array[i].Equals(item))
            {
                return true;
            }
        }
        return false;
    }

    public void Insert(int index, object? value)
    {
        if (index < 0 || index > Count)
        {
            throw new IndexOutOfRangeException("out of range");
        }

        if (Count == Capacity)
        {
            object[] newArray = new object[Capacity * 2];
            for (int i = 0; i < Count; i++)
            {
                newArray[i] = _array[i];
            }
            _array = newArray;
            Capacity = _array.Length;
        }

        for (int i = Count; i > index; i--)
        {
            _array[i] = _array[i - 1];
        }

        _array[index] = value;
        Count++;
    }

    public object Clone()
    {
        MyArrayList copy = new MyArrayList(Count);
        for (int i = 0; i < Count; i++)
        {
            copy.Add(_array[i]);
        }
        return copy;
    }

    public IEnumerator GetEnumerator()
    {
        for (int i = 0; i < Count; i++)
        {
            yield return _array[i];
        }
    }

    public int BinarySearch(object item, IComparer comparer)
    {
        int left = 0;
        int right = Count - 1;
        if (item == null)
        {
            throw new ArgumentNullException("Item to search cannot be null.");
        }

        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            int comparisonResult = comparer.Compare(_array[mid], item);

            if (comparisonResult == 0)
            {
                return mid;
            }
            else if (comparisonResult < 0)
            {
                left = mid + 1;
            }
            else
            {
                right = mid - 1;
            }
        }

        return -1;
    }

    public void Display()
    {
        for (int i = 0; i < Count; i++)
        {
            Console.WriteLine(_array[i]);
        }
    }
}

public class IntComparer : IComparer
{
    public int Compare(object? x, object? y)
    {
        if (x == null || y == null)
            throw new ArgumentNullException("Cannot compare null values.");

        if (!(x is int) || !(y is int))
            throw new ArgumentException("Both parameters should be of type int.");

        int num1 = (int)x;
        int num2 = (int)y;

        return num1.CompareTo(num2);
    }
}

class MyProgram
{
    public static void Main()
    {
        MyArrayList arrayList = new MyArrayList(4);
        arrayList.Add(10);
        arrayList.Add(20);
        arrayList.Add(30);
        arrayList.Add(40);
        arrayList.Add(50);
        arrayList.RemoveAt(2);
        arrayList.Remove(20);
        arrayList.Insert(1, 90);
        arrayList.Display();
        Console.WriteLine(arrayList.Contains(10));
        Console.WriteLine("\t");
        MyArrayList clonedList = (MyArrayList)arrayList.Clone();
        clonedList.Display();
        Console.WriteLine("\t");
        foreach (var item in arrayList)
        {
            Console.WriteLine(item);
        }
        int index = arrayList.BinarySearch(90, new IntComparer());
        Console.WriteLine(index);
    }
}
