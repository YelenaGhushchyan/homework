using System.Collections.Concurrent;
using System.Runtime.InteropServices.Marshalling;

public class Solution {
    static void QuickSort<T>(T[] arr, int left, int right) where T : IComparable<T>
    {
        if (left < right)
        {
            int PivotIndex = Partition(arr, left, right);
            QuickSort(arr,left,PivotIndex - 1);
            QuickSort(arr,PivotIndex + 1,right);
        }
    }

    static int Partition<T>(T[] arr, int left, int right) where T : IComparable<T>
    {
        T pivot = arr[right];
        int i = left - 1;

        for (int j = left; j < right; j++)
        {
            if (arr[j].CompareTo(pivot) < 0)
            {
                i++;
                Swap(arr,i,j);
            }
        }
        Swap(arr,i+1,right);
        return i + 1;
    }

    static void Swap<T>(T[] arr, int i, int j)
    {
        T temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public static void Main()
    {
        int[] arr = new[] { 7, 2, 1, 8, 6, 3, 5, 4 };
        QuickSort(arr,0,arr.Length - 1);
        for (int i = 0; i < arr.Length - 1; i++)
        {
            Console.WriteLine(arr[i]);
        }

    }
}
